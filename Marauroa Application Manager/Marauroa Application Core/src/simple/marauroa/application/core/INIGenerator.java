/*
 * INIGenerator.java
 *
 * Created on Feb 2, 2011, 3:11:50 PM
 */
package simple.marauroa.application.core;

import java.util.Map.Entry;
import java.util.Properties;
import javax.swing.JTable;
import simple.marauroa.application.api.IMarauroaApplication;

/**
 *
 * @author Javier A. Ortiz Bultr√≥n <javier.ortiz.78@gmail.com>
 */
public class INIGenerator extends javax.swing.JPanel {

    private static INIGenerator instance = null;
    private static IMarauroaApplication application;
    private static JTable propertyTable = new javax.swing.JTable();
    private static Properties configuration = new Properties();

    /** Creates new form INIGenerator */
    private INIGenerator() {
        initComponents();
    }

    public static INIGenerator get() {
        if (instance == null) {
            instance = new INIGenerator();
        }
        return instance;
    }

    public static void showINI(IMarauroaApplication app,
            Properties config) {
        get();
        application = app;
        configuration = config;
        Object[][] contents = new Object[config.size()][2];
        //Add the information into the table
        int i = 0;
        for (Entry entry : config.entrySet()) {
            contents[i][0] = entry.getKey();
            contents[i][1] = entry.getValue();
            i++;
        }
        propertyTable.setModel(new javax.swing.table.DefaultTableModel(
                contents,
                new String[]{
                    "Property", "Value"
                }) {

            Class[] types = new Class[]{
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean[]{
                false, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        tablePane.setViewportView(propertyTable);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        save = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        tablePane = new javax.swing.JScrollPane();

        setAutoscrolls(true);

        save.setText(org.openide.util.NbBundle.getMessage(INIGenerator.class, "INIGenerator.save.text")); // NOI18N
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        cancel.setText(org.openide.util.NbBundle.getMessage(INIGenerator.class, "INIGenerator.cancel.text")); // NOI18N
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tablePane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 253, Short.MAX_VALUE)
                        .addComponent(cancel)))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tablePane, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(cancel))
                .addGap(11, 11, 11))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        instance.setVisible(false);
    }//GEN-LAST:event_cancelActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        for (int i = 0; i < propertyTable.getRowCount(); i++) {
            configuration.put(propertyTable.getModel().getValueAt(i, 0),
                    propertyTable.getModel().getValueAt(i, 1));
        }
        application.saveINIFile(configuration);
    }//GEN-LAST:event_saveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JButton save;
    private static javax.swing.JScrollPane tablePane;
    // End of variables declaration//GEN-END:variables
}
