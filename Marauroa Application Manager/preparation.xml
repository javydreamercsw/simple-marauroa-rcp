<?xml version="1.0" encoding="UTF-8"?>
<project name="MSM-Preparation" basedir=".">
    <description>Prepares the environment to build the module suite MSM.</description>
    <!--Don't modify this file unless you know what you are doing-->
    <property name="ant-contrib-filename" value="ant-contrib-1.0b3.jar"/>
    <property file="nbproject/project.properties"/>
    <property file="nbproject/platform.properties"/>
    <property name="platform.dir" value="../netbeans/"/>
    <echo>${lib.dir}</echo>
    <property name="lib.dir" value="${suite.dir}/../Simple Libs/tools"/>
       
    <target name="update-platform" depends="init-netbeans">
        <delete includeemptydirs="true">
            <fileset dir="${platform.dir}" includes="**/*"/>
        </delete>
        <mkdir dir="${platform.dir}"/>
        <for list="${cluster.path}" delimiter=":" param="cur" trim="true">
            <sequential>
                <add-core-module module="@{cur}"/>
            </sequential>
        </for>
    </target>

    <target name="unzip-compilation-env" depends="init-netbeans, init-hudson">
        <!--Hudson needs to run this task first as it gets the core modules as zip from version control-->
        <for list="${cluster.path}" delimiter=":" param="cur" trim="true">
            <sequential>
                <expand-module module="@{cur}"/>
            </sequential>
        </for>
    </target>

    <target name="update-env" depends="init-netbeans, init-hudson" description="Update the Netbeans core modules used to compile/run OIT">
        <!--Make sure that any recently added module using the IDE is also included.
        Fix it to the properformat.-->
        <mkdir dir="${platform.dir}"/>
        <propertyregex property="cluster.path"
               input="${cluster.path}"
               regexp="nbplatform.active.dir"
               replace="platform.base"
               global="true"
               override="true"/>
        <replaceregexp file="nbproject/platform.properties"
                       match="nbplatform.active.dir"
                       replace="platform.base"
                       byline="true"
                       flags="g,s"/>
        <pathconvert pathsep="\;" property="folders_temp">
            <dirset dir="${platform.dir}">
                <include name="*/**"/>
                <!--ignore svn and cvs files-->
                <include name="**/.svn"/>
                <include name="**/.svn/**"/>
                <include name="**/CVS"/>
                <include name="**/CVS/**"/>
                <!--Exclude the root folder-->
                <exclude name="${platform.dir}"/>
            </dirset>
        </pathconvert>
        <antcall target="update-platform"/>
        <antcall target="unzip-compilation-env"/>
    </target>

    <macrodef name="expand-module">
        <attribute name="module"/>
        <sequential>
            <if>
                <not>
                    <contains string="@{module}" substring="build"/>
                </not>
                <then>
                    <delete dir="@{module}"/>
                    <unzip src="@{module}.zip" dest="@{module}"/>
                </then>
            </if>
            
        </sequential>
    </macrodef>

    <macrodef name="add-core-module">
        <attribute name="module"/>
        <sequential>
            <if>
                <equals arg1="@{module}" arg2="${platform.dir}nb-plugins"/>
                <then>
                    <echo>Adding custom module @{module}</echo>
                    <available file="@{module}" type="dir" property="@{module}.customdir.exists"/>
                    <if>
                        <equals arg1="${@{module}.customdir.exists}" arg2="true"/>
                        <then>
                            <echo>Adding custom module @{module}</echo>
                            <zip destfile="@{module}.zip" basedir="@{module}" update="true"/>
                        </then>
                        <else>
                            <fail message="Error adding module @{module}."/>
                        </else>
                    </if>
                </then>
                <elseif>
                    <contains string="@{module}" substring="build"/>
                    <then>
                        <echo>Adding project/suite @{module}</echo>
                        <available file="@{module}" type="dir" property="@{module}.customdir.exists"/>
                        <if>
                            <equals arg1="${@{module}.customdir.exists}" arg2="true"/>
                            <then>
                                <echo>Make sure to add the token dependency for @{module}</echo>
                            </then>
                            <else>
                                <fail message="Error adding module @{module}."/>
                            </else>
                        </if>
                    </then>
                </elseif>
                <else>
                    <length string="@{module}" property="@{module}.length.module" />
                    <substring text="@{module}" start="12" end="${@{module}.length.module}" property="new.module"/>
                    <echo>Adding netbeans core module ${new.module}</echo>
                    <mkdir dir="${platform.dir}${new.module}/"/>
                    <delete file="${platform.dir}${new.module}.zip"/>
                    <delete includeemptydirs="true">
                        <fileset dir="${platform.dir}${new.module}/" includes="**/.*" defaultexcludes="false"/>
                    </delete>
                    <zip destfile="${platform.dir}${new.module}.zip" basedir="${netbeans.home}\..\${new.module}" update="true"/>
                </else>
            </if>
        </sequential>
    </macrodef>
    
    <scriptdef name="substring" language="javascript">
        <attribute name="text" />
        <attribute name="start" />
        <attribute name="end" />
        <attribute name="property" />
     <![CDATA[
       var text = attributes.get("text");
       var start = attributes.get("start");
       var end = attributes.get("end") || text.length;
       project.setProperty(attributes.get("property"), text.substring(start, end));
     ]]>
    </scriptdef>

    <target name="check-env" depends="getAntContribJar">
        <condition property="isNetbeans">
            <not>
                <isset property="Hudson"/>
            </not>
        </condition>
        <property name="xmltasks-loc" value="${lib.dir}/xmltask.jar"/>
        <available file="${xmltasks-loc}" property="xmltasks.present"/>
        <fail unless="xmltasks.present" message="The xmltasks jar doesn't exist at: ${xmltasks-loc}, can't build. Check your settings!" />
        <taskdef name="xmltask" 
            classname="com.oopsconsultancy.xmltask.ant.XmlTask">
            <classpath>
                <pathelement location="${xmltasks-loc}"/>
            </classpath>
        </taskdef>
    </target>

    <target name="getAntContribJar">
        <fileset id="ant-contrib-jar" dir="${lib.dir}">
            <include name="ant-contrib-*.jar" />
        </fileset>
        <pathconvert property="ant-contrib-jar" refid="ant-contrib-jar" pathsep="," />
        <basename property="ant-contrib-filename" file="${ant-contrib-jar}"/>
    </target>

    <target name="init-netbeans" depends="check-env" if="isNetbeans">
        <echo>Configuring ant-contrib for Netbeans use...</echo>
        <property name="ant-contrib-loc" value="${lib.dir}/${ant-contrib-filename}"/>
        <available file="${ant-contrib-loc}" property="ant-contrib.present"/>
        <fail unless="ant-contrib.present" message="The ant-contrib jar doesn't exist at: ${ant-contrib-loc}, can't build. Check your settings!" />
        <!--We are in not Hudson-->
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="${ant-contrib-loc}"/>
            </classpath>
        </taskdef>
    </target>

    <target name="init-hudson" depends="check-env" unless="isNetbeans">
        <echo>Configuring ant-contrib for Hudson use...</echo>
        <!--Import Hudson environment variables-->
        <property environment="env"/>
        <property name="ant-contrib-loc" value="${env.ANT_HOME}/lib/${ant-contrib-filename}"/>
        <available file="${ant-contrib-loc}" property="ant-contrib.present"/>
        <fail unless="ant-contrib.present" message="The ant-contrib jar doesn't exist at: ${ant-contrib-loc}, can't build. Check your settings!" />
        <!--Define it. For some reason the approach in init-netbeans doesn't work in Hudson.-->
        <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
            <classpath>
                <pathelement location="${ant-contrib-loc}"/>
            </classpath>
        </taskdef>
        <taskdef name="propertyregex" classname="net.sf.antcontrib.property.RegexTask">
            <classpath>
                <pathelement location="${ant-contrib-loc}"/>
            </classpath>
        </taskdef>
        <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask">
            <classpath>
                <pathelement location="${ant-contrib-loc}"/>
            </classpath>
        </taskdef>
        <taskdef name="math" classname="net.sf.antcontrib.math.MathTask">
            <classpath>
                <pathelement location="${ant-contrib-loc}"/>
            </classpath>
        </taskdef>
        <taskdef name="var" classname="net.sf.antcontrib.property.Variable">
            <classpath>
                <pathelement location="${ant-contrib-loc}"/>
            </classpath>
        </taskdef>
    </target>
    
    <macrodef name="update-or-clone">
        <attribute name="url"/>
        <attribute name="path"/>
        <attribute name="repo"/>
        <!--Make sure the required projects are there-->
        <sequential>
            <mkdir dir="@{path}"/>
            <if>
                <or>
                    <not>
                        <available file="@{path}" type="dir"/>
                    </not>
                    <not>
                        <available file="@{path}/.hg" type="dir"/>
                    </not>
                </or>
                <then>
                    <echo>Project @{path} not found, checking out please wait!</echo>
                    <if>
                        <equals arg1="@{repo}" arg2="hg"/> 
                        <then>
                            <hg cmd="clone" source="@{url}" destination="@{path}">
                                <arg value="--insecure" />    
                            </hg>
                        </then>
                        <else>
                            <fail message="Repository @{repo} not supported!"/>
                        </else>
                    </if>
                </then>
                <else>
                    <if>
                        <equals arg1="@{repo}" arg2="hg"/> 
                        <then>
                            <echo>Project @{path} found, updating please wait!</echo>
                            <hg cmd="update" dir="@{path}"/>
                        </then>

                        <else>
                            <fail message="Repository @{repo} not supported!"/>
                        </else>
                    </if>
                </else>
            </if>
                        
        </sequential>
    </macrodef>  
</project>
