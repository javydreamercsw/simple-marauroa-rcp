Please refer to [[CreateExtension| Create Extensions]] for more details on the creation process.
== Dimension Extension==
This will provide common attributes for all entities:
*width
*height
*resistance
*location (x,y coordinates)
*visibility
*ghostmode
This are specially usefull for size-aware applications like ones with some kind of visualization on the client side.
<pre name="java">
package simple.server.extension;

import marauroa.common.game.Definition;
import marauroa.common.game.RPClass;
import marauroa.common.game.RPObject;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author Javier A. Ortiz Bultrón <javier.ortiz.78@gmail.com>
 */
@ServiceProvider(service = MarauroaServerExtension.class)
public class DimensionExtension extends SimpleServerExtension {

    @Override
    public void modifyRootRPClassDefinition(RPClass entity) {
        /**
         * Resistance to other entities (0-100). 0=Phantom, 100=Obstacle.
         */
        entity.addAttribute("resistance", Definition.Type.BYTE, Definition.VOLATILE);
        /**
         * Entity location
         */
        entity.addAttribute("x", Definition.Type.SHORT);
        entity.addAttribute("y", Definition.Type.SHORT);
        /*
         * The size of the entity (in world units).
         */
        entity.addAttribute("width", Definition.Type.SHORT, Definition.VOLATILE);
        entity.addAttribute("height", Definition.Type.SHORT, Definition.VOLATILE);
        /*
         * The visibility of the entity drawn on client (0-100). 0=Invisible,
         * 100=Solid. Useful when mixed with effect.
         */
        entity.addAttribute("visibility", Definition.Type.INT, Definition.VOLATILE);
    }

    @Override
    public void rootRPClassUpdate(RPObject entity) {
        if (!entity.has("width")) {
            entity.put("width", 1);
        }
        if (!entity.has("height")) {
            entity.put("height", 1);
        }
        if (!entity.has("x")) {
            entity.put("x", 0);
        }
        if (!entity.has("y")) {
            entity.put("y", 0);
        }
        if (!entity.has("resistance")) {
            entity.put("resistance", 100);
        }
        if (!entity.has("visibility")) {
            entity.put("visibility", 100);
        }
    }
}
</pre>
=== Explanation===
*'''modifyRootRPClassDefinition''': Add the new attributes to the Root RPClass
*'''rootRPClassUpdate''': Update already existing entities with default values if not present already.

After this just drop the jar file in a location and make sure it is included in the server's class path.
== Wraping Extension in a NetBeans Platform Module==
If you are planning on using the extension on the RCP applications of the Simple Marauroa project you'll need to wrap the created extension jar folder in a Wrapper Module. Follow [http://wiki.netbeans.org/DevFaqWrapperModules this] guidelines so the Wrapper is able to clean and build the Java project. After some tweaking this are the tasks to actually use to meet our project structure:
<pre name="xml">
<import file="${suite.dir}/preparation.xml"/>
    
    <property name="original.project.dir" value="Path/to/extension/project"/>

    <target name="release" depends="init-netbeans, init-hudson">
        <property file="${original.project.dir}/nbproject/project.properties" prefix="extension-lib"/>
        <length string="${extension-lib.dist.dir}" property="length.dist" />
        <math result="length.dist" operand1="1" operation="+" operand2="${length.dist}" datatype="int"/>
        <length string="${extension-lib.dist.jar}" property="length.dist.jar" />
        <substring text="${extension-lib.dist.jar}" start="${length.dist}" end="${length.dist.jar}" property="extension-lib.dist.jar" />
        <!--Update the module's property file-->
        <propertyfile file="nbproject/project.properties">
            <entry key="extra.module.files" value="modules/ext/extensions/${extension-lib.dist.jar}"/>
        </propertyfile>
        <!--Update the project's metadata-->
        <xmltask source="nbproject/project.xml" dest="nbproject/project.xml">
            <replace path="/project/configuration/data/class-path-extension/runtime-relative-path/text()" 
            withText="ext/extensions/${extension-lib.dist.jar}"/>
            <replace path="/project/configuration/data/class-path-extension/binary-origin/text()" 
            withText="${original.project.dir}/dist/${extension-lib.dist.jar}"/>
        </xmltask>
        <property name="original.project.jar"
          value="${original.project.dir}/dist/${extension-lib.dist.jar}"/>
        <echo message="Building ${original.project.dir}"/>
        <ant dir="${original.project.dir}" usenativebasedir="true"
         target="jar" inheritall="false" inheritrefs="false"/>
        <echo message="Done building ${original.project.dir}"/>
        <copy todir="../build/cluster/modules/ext/extension" file="${original.project.jar}"/>
    </target>


    <target name="clean" depends="projectized-common.clean">
        <echo message="Cleaning ${original.project.dir}"/>
        <ant dir="${original.project.dir}" usenativebasedir="true"
         target="clean" inheritall="false" inheritrefs="false"/>
        <echo message="Done cleaning ${original.project.dir}"/>
    </target>
</pre>