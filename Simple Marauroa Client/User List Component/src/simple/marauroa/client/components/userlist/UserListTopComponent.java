package simple.marauroa.client.components.userlist;

import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JList;
import marauroa.common.game.RPObject;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import simple.marauroa.client.components.common.MCITool;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//simple.marauroa.client.components.userlist//UserList//EN",
autostore = false)
@TopComponent.Description(preferredID = "UserListTopComponent",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "simple.marauroa.client.components.userlist.UserListTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_UserListAction",
preferredID = "UserListTopComponent")
public final class UserListTopComponent extends TopComponent {
    //Player names

    final ArrayList<String> players = new ArrayList<String>();

    public UserListTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(UserListTopComponent.class, "CTL_UserListTopComponent"));
        setToolTipText(NbBundle.getMessage(UserListTopComponent.class, "HINT_UserListTopComponent"));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        playerList = new javax.swing.JList();
        updateModel();

        jScrollPane1.setViewportView(playerList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList playerList;
    // End of variables declaration//GEN-END:variables

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        //TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        //TODO read your settings according to their version
    }

    public void addPlayer(RPObject object) {
        String player = object.get("name");
        if (player == null) {
            //Try to get it from the world
            RPObject fromWorld = MCITool.getClient().getFromWorld(object.getID());
            if (fromWorld != null) {
                object = fromWorld;
                player = object.get("name");
            }
        }
        if (player != null && !players.contains(player)) {
            Logger.getLogger(UserListTopComponent.class.getSimpleName()).log(
                    Level.FINE, "Request to add player: {0}", player);
            players.add(player);
            //Sort it
            Collections.sort(players);
        }
        updateModel();
    }

    public JList getPlayerList() {
        return playerList;
    }

    public void removePlayer(RPObject object) {
        String player = object.get("name");
        if (player != null && players.contains(player)) {
            Logger.getLogger(UserListTopComponent.class.getSimpleName()).log(
                    Level.FINE, "Request to remove player: {0}", player);
            players.remove(player);
            playerList.updateUI();
        }
        updateModel();
    }

    protected void clearList() {
        players.clear();
        updateModel();
    }

    private void updateModel() {
        playerList.setModel(new javax.swing.AbstractListModel() {

            @Override
            public int getSize() {
                return players.size();
            }

            @Override
            public Object getElementAt(int i) {
                return players.get(i);
            }
        });
    }
}
