package simple.marauroa.client.components.userlist;

import java.util.Collection;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.JList;
import marauroa.common.game.RPObject;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;
import org.openide.util.lookup.ServiceProvider;
import simple.client.HeaderLessEventLine;
import simple.common.NotificationType;
import simple.marauroa.client.components.api.IUserListComponent;
import simple.marauroa.client.components.common.SortedListModel;
import simple.marauroa.client.components.common.MCITool;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//simple.marauroa.client.components.userlist//UserList//EN",
autostore = false)
@TopComponent.Description(preferredID = "UserListTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "rightSlidingSide", openAtStartup = true)
@ActionID(category = "Window", id = "simple.marauroa.client.components.userlist.UserListTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_UserListAction",
preferredID = "UserListTopComponent")
@ServiceProvider(service = IUserListComponent.class)
public final class UserListTopComponent extends TopComponent
        implements IUserListComponent, LookupListener {

    private Lookup.Result result = null;

    public UserListTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(UserListTopComponent.class, "CTL_UserListTopComponent"));
        setToolTipText(NbBundle.getMessage(UserListTopComponent.class, "HINT_UserListTopComponent"));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        playerList = new javax.swing.JList();

        playerList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(playerList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(121, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList playerList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(RPObject.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        //TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        //TODO read your settings according to their version
    }

    @Override
    public void addPlayer(RPObject p) {
        Logger.getLogger(UserListTopComponent.class.getSimpleName()).log(
                Level.FINE, "Request to add player: {0}", p);
        if (!modelHasElement((AbstractListModel) getPlayerList().getModel(), p.get("name"))) {
            AbstractListModel temp = (AbstractListModel) getPlayerList().getModel();
            if (temp.getSize() == 0) {
                getPlayerList().setModel(addToModel(p.get("")));
            } else {
                String players = getModelElements(temp) + "#" + p;
                getPlayerList().setModel(addToModel(players));
            }
        }
        getPlayerList().repaint();
    }

    @Override
    public boolean modelHasElement(AbstractListModel m, String e) {
        for (int i = 0; i < m.getSize(); i++) {
            if (m.getElementAt(i).equals(e)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public JList getPlayerList() {
        return playerList;
    }

    @Override
    public SortedListModel addToModel(final String list) {
        Logger.getLogger(UserListTopComponent.class.getSimpleName()).log(
                Level.FINE, "Request to add list to model: {0}", list);
        AbstractListModel model = null;
        if (list.contains("#")) {
            StringTokenizer st = new StringTokenizer(list, "#");
            final String strings[] = new String[st.countTokens()];
            int i = 0;
            while (st.hasMoreTokens()) {
                strings[i] = st.nextToken();
                i++;
            }
            model = new javax.swing.AbstractListModel() {

                @Override
                public int getSize() {
                    return strings.length;
                }

                @Override
                public Object getElementAt(int i) {
                    return strings[i];
                }
            };
        } else {
            model = new javax.swing.AbstractListModel() {

                final String strings[] = {list};

                @Override
                public int getSize() {
                    return strings.length;
                }

                @Override
                public Object getElementAt(int i) {
                    return strings[i];
                }
            };
        }
        return new SortedListModel(model);
    }

    private String getModelElements(AbstractListModel m) {
        if (m.getSize() == 0) {
            return "";
        }
        String elements = "";
        for (int i = 0; i < m.getSize(); i++) {
            elements += m.getElementAt(i);
            if (i < m.getSize() && m.getSize() > 1) {
                elements += "#";
            }
        }
        return elements;
    }

    @Override
    public void setListSeparator(char character) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void removePlayer(RPObject p) {
        Logger.getLogger(UserListTopComponent.class.getSimpleName()).log(
                Level.FINE, "Request to remove player: {0}", p);
        if (modelHasElement((AbstractListModel) getPlayerList().getModel(), p.get("name"))) {
            AbstractListModel temp = (AbstractListModel) getPlayerList().getModel();
            if (temp.getSize() == 1) {
                getPlayerList().setModel(addToModel(""));
            } else {
                String players = getModelElements(temp);
                players.replaceAll("," + p, "").replaceAll(p.get("name"), "");
                getPlayerList().setModel(addToModel(players));
            }
            MCITool.outputInChatComponent(new HeaderLessEventLine(p
                    + " just left the room!", NotificationType.INFORMATION));
        }
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Lookup.Result r = (Lookup.Result) ev.getSource();
        Collection c = r.allInstances();
        //Repopulate
        if (!c.isEmpty()) {
            RPObject selected = (RPObject) c.iterator().next();
        }
    }
}
