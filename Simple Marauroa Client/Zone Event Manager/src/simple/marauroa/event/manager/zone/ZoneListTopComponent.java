package simple.marauroa.event.manager.zone;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.SwingUtilities;
import marauroa.client.ClientFramework;
import marauroa.common.game.RPAction;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import simple.marauroa.application.core.tool.Tool;
import simple.marauroa.client.components.common.MCITool;
import simple.marauroa.event.manager.zone.dialog.ZoneDialog;
import simple.server.extension.ZoneExtension;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//simple.marauroa.event.manager.zone//ZoneList//EN",
autostore = false)
@TopComponent.Description(preferredID = "ZoneListTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "top", openAtStartup = true)
@ActionID(category = "Window", id = "simple.marauroa.event.manager.zone.ZoneListTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ZoneListAction",
preferredID = "ZoneListTopComponent")
public final class ZoneListTopComponent extends TopComponent{

    final ArrayList<String> zones = new ArrayList<String>();
    private ZoneDialog crd = null;

    public ZoneListTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ZoneListTopComponent.class, "CTL_ZoneListTopComponent"));
        setToolTipText(NbBundle.getMessage(ZoneListTopComponent.class, "HINT_ZoneListTopComponent"));
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_SLIDING_DISABLED, Boolean.TRUE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ZonePopUpMenu = new javax.swing.JPopupMenu();
        createMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        edit = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        deleteMenu = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        joinMenu = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        zoneList = new javax.swing.JList();
        updateModel();

        org.openide.awt.Mnemonics.setLocalizedText(createMenu, org.openide.util.NbBundle.getMessage(ZoneListTopComponent.class, "ZoneListTopComponent.createMenu.text")); // NOI18N
        createMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMenuActionPerformed(evt);
            }
        });
        ZonePopUpMenu.add(createMenu);
        ZonePopUpMenu.add(jSeparator1);

        org.openide.awt.Mnemonics.setLocalizedText(edit, org.openide.util.NbBundle.getMessage(ZoneListTopComponent.class, "ZoneListTopComponent.edit.text")); // NOI18N
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        ZonePopUpMenu.add(edit);
        ZonePopUpMenu.add(jSeparator2);

        org.openide.awt.Mnemonics.setLocalizedText(deleteMenu, org.openide.util.NbBundle.getMessage(ZoneListTopComponent.class, "ZoneListTopComponent.deleteMenu.text")); // NOI18N
        deleteMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuActionPerformed(evt);
            }
        });
        ZonePopUpMenu.add(deleteMenu);
        ZonePopUpMenu.add(jSeparator3);

        org.openide.awt.Mnemonics.setLocalizedText(joinMenu, org.openide.util.NbBundle.getMessage(ZoneListTopComponent.class, "ZoneListTopComponent.joinMenu.text")); // NOI18N
        joinMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinMenuActionPerformed(evt);
            }
        });
        ZonePopUpMenu.add(joinMenu);

        zoneList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zoneListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(zoneList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void zoneListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoneListMouseClicked
        zoneList.setSelectedIndex(zoneList.locationToIndex(evt.getPoint()));
        if (SwingUtilities.isRightMouseButton(evt) && !zoneList.isSelectionEmpty()
                && zoneList.locationToIndex(evt.getPoint()) == zoneList.getSelectedIndex()) {
            ZonePopUpMenu.show(zoneList, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_zoneListMouseClicked

    private void createMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMenuActionPerformed
        getRoomDialog(ZoneDialog.ADD);
}//GEN-LAST:event_createMenuActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        getRoomDialog(ZoneDialog.UPDATE);
}//GEN-LAST:event_editActionPerformed

    private void deleteMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuActionPerformed
        RPAction action = new RPAction();
        action.put("type", ZoneExtension.TYPE);
        String room = zoneList.getSelectedValue().toString();
        int end = room.indexOf(":");
        action.put(ZoneExtension.ROOM, end == -1 ? room : room.substring(0, end));
        action.put(ZoneExtension.OPERATION, ZoneExtension.DELETE);
        ((ClientFramework) MCITool.getClient()).send(action);
}//GEN-LAST:event_deleteMenuActionPerformed

    private void joinMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinMenuActionPerformed

        String fullRoomName = zoneList.getSelectedValue().toString();
        String targetRoom = "";
        if (fullRoomName.contains(":")) {
            targetRoom = fullRoomName.substring(0, fullRoomName.indexOf(":"));
        } else {
            targetRoom = fullRoomName;
        }
        RPAction action = new RPAction();
        action.put("type", ZoneExtension.TYPE);
        action.put(ZoneExtension.ROOM, targetRoom);
        action.put(ZoneExtension.OPERATION, ZoneExtension.JOIN);
        ((ClientFramework) MCITool.getClient()).send(action);
}//GEN-LAST:event_joinMenuActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu ZonePopUpMenu;
    private javax.swing.JMenuItem createMenu;
    private javax.swing.JMenuItem deleteMenu;
    private javax.swing.JMenuItem edit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JMenuItem joinMenu;
    private javax.swing.JList zoneList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void addZone(String zone) {
        if (!zones.contains(zone)) {
            zones.add(zone);
            updateModel();
        }
    }

    public void removeZone(String zone) {
        if (zones.contains(zone)) {
            zones.remove(zone);
            updateModel();
        }
    }

    public void updateZone(String zone, String modified) {
        if (zones.contains(zone)) {
            removeZone(zone);
            addZone(modified);
            updateModel();
        }
    }

    public void requestPassword() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void updateModel() {
        Collections.sort(zones);
        zoneList.setModel(new javax.swing.AbstractListModel() {

            @Override
            public int getSize() {
                return zones.size();
            }

            @Override
            public Object getElementAt(int i) {
                return zones.get(i);
            }
        });
    }

    public void clearList() {
        zones.clear();
        updateModel();
    }

    /**
     * @param mode 
     * @return the crd
     */
    public ZoneDialog getRoomDialog(int mode) {
        if (crd == null) {
            crd = new ZoneDialog(true, mode);
        } else {
            crd.update(mode);
        }
        Tool.centerDialog(crd);
        crd.setVisible(true);
        return crd;
    }

    public List getSelectedValues() {
        return zoneList.getSelectedValuesList();
    }

    public Object getSelectedValue() {
        return zoneList.getSelectedValue();
    }
}
