package simple.marauroa.event.manager.zone.dialog;

import javax.swing.JFrame;
import marauroa.client.ClientFramework;
import marauroa.common.game.RPAction;
import simple.marauroa.client.components.common.MCITool;
import simple.server.extension.ZoneExtension;

/**
 *
 * @author Javier A. Ortiz Bultron <javier.ortiz.78@gmail.com>
 */
public class ZoneDialog extends javax.swing.JDialog {

    public static final int ADD = 1, UPDATE = 2;
    private int mode;

    /** Creates new form CreateRoomDialog
     * @param parent
     * @param modal
     * @param client
     * @param mode 
     */
    @SuppressWarnings("OverridableMethodCallInConstructor")
    public ZoneDialog(boolean modal, int mode) {
        super(new JFrame(), modal);
        initComponents();
        this.mode = mode;
        update(mode);
    }

    /**
     * Dialog mode
     * @param mode
     */
    public void update(int mode) {
        switch (mode) {
            case ADD:
                dialogLabel.setText("Enter the name for the new room");
                roomName.setEditable(true);
                process.setText("Create");
                break;
            case UPDATE:
                dialogLabel.setText("Enter the new room description");
                roomName.setEditable(false);
                String room = MCITool.getZoneListManager().getSelectedValue().toString();
                int end = room.indexOf(":");
                roomName.setText(end == -1
                        ? MCITool.getZoneListManager().getSelectedValue().toString()
                        : MCITool.getZoneListManager().getSelectedValue().toString().substring(0, end));
                description.setText(end == -1 ? "" : room.substring(end + 2, room.length()));
                process.setText("Update");
                break;
            default:
        }
    }

    private void clean() {
        roomName.setText("");
        description.setText("");
        //Reset for security.
        StringBuilder reset = new StringBuilder();
        for (int i = 0; i < roomPassword.getPassword().length; i++) {
            reset.append("0");
        }
        roomPassword.setText(reset.toString());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roomName = new javax.swing.JTextField();
        dialogLabel = new javax.swing.JLabel();
        process = new javax.swing.JButton();
        javax.swing.JButton cancel = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        description = new javax.swing.JTextArea();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        roomPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        roomName.setName("roomName"); // NOI18N
        roomName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomNameActionPerformed(evt);
            }
        });

        dialogLabel.setText("Enter the name for the new room");
        dialogLabel.setName("dialogLabel"); // NOI18N

        process.setText("Create");
        process.setName("process"); // NOI18N
        process.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.setName("cancel"); // NOI18N
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        statusLabel.setForeground(new java.awt.Color(255, 0, 0));
        statusLabel.setName("statusLabel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        description.setColumns(20);
        description.setRows(5);
        description.setWrapStyleWord(true);
        description.setName("description"); // NOI18N
        jScrollPane1.setViewportView(description);

        jLabel1.setText("Enter room's description (optional)");
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText("Enter room's password (optional)");
        jLabel2.setName("jLabel2"); // NOI18N

        roomPassword.setName("roomPassword"); // NOI18N
        roomPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(process)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel))
                    .addComponent(dialogLabel)
                    .addComponent(roomName)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(roomPassword, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dialogLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(process)
                    .addComponent(cancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        this.setVisible(false);
        clean();
    }//GEN-LAST:event_cancelActionPerformed

    private void processActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processActionPerformed
        if (roomName.getText().trim().isEmpty() || roomName.getText().trim().contains(":") || roomName.getText().trim().contains("#")) {
            statusLabel.setText("Invalid room name. Can't use ':' or '#' in the room name");
        } else {
            statusLabel.setText("");
            if (MCITool.getClient() != null) {
                RPAction action = new RPAction();
                action.put("type", ZoneExtension.TYPE);
                action.put(ZoneExtension.ROOM, roomName.getText().trim());
                switch (mode) {
                    case ADD:
                        action.put(ZoneExtension.OPERATION, ZoneExtension.CREATE);
                        if (!description.getText().trim().isEmpty()) {
                            action.put(ZoneExtension.DESC, description.getText().trim());
                        }
                        if (roomPassword.getPassword().length > 0
                                && !roomPassword.getPassword().toString().trim().isEmpty()) {
                            action.put(ZoneExtension.PASSWORD, roomPassword.getPassword().toString());
                        }
                        break;
                    case UPDATE:
                        action.put(ZoneExtension.OPERATION, ZoneExtension.UPDATE);
                        if (!description.getText().trim().isEmpty()) {
                            action.put(ZoneExtension.DESC, description.getText().trim());
                        }
                        if (roomPassword.getPassword().length > 0
                                && !roomPassword.getPassword().toString().trim().isEmpty()) {
                            action.put(ZoneExtension.PASSWORD, roomPassword.getPassword().toString());
                        }
                        break;
                    default:
                        return;
                }
                ((ClientFramework) MCITool.getClient()).send(action);
                clean();
            }
        }
        setVisible(false);
}//GEN-LAST:event_processActionPerformed

    private void roomNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomNameActionPerformed
        roomPassword.requestFocusInWindow();
    }//GEN-LAST:event_roomNameActionPerformed

    private void roomPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomPasswordActionPerformed
        description.requestFocusInWindow();
    }//GEN-LAST:event_roomPasswordActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea description;
    private javax.swing.JLabel dialogLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton process;
    private javax.swing.JTextField roomName;
    private javax.swing.JPasswordField roomPassword;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}
